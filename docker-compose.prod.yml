version: '3.8'

services:
  # Database
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-vtt_prod}
      POSTGRES_USER: ${DATABASE_USER:-vtt_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/server/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-vtt_user} -d ${DATABASE_NAME:-vtt_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vtt-network
    security_opt:
      - no-new-privileges:true

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - vtt-network
    security_opt:
      - no-new-privileges:true

  # VTT Server Application
  server:
    build:
      context: .
      dockerfile: ./apps/server/Dockerfile
      target: production
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DATABASE_USER:-vtt_user}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-vtt_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CORS_ORIGIN=${CLIENT_URL:-https://vtt.yourdomain.com}
      - PORT=8080
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-1000}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SENTRY_DSN=${SENTRY_DSN}
      - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE:-50mb}
      - SESSION_SECRET=${SESSION_SECRET}
    ports:
      - "${SERVER_PORT:-8080}:8080"
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - vtt-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # VTT Client Application  
  client:
    build:
      context: .
      dockerfile: ./apps/client/Dockerfile
      target: production
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.yourdomain.com
      - VITE_WS_URL=wss://api.yourdomain.com
      - VITE_SENTRY_DSN=${CLIENT_SENTRY_DSN}
    ports:
      - "${CLIENT_PORT:-3000}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health.html"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - vtt-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Reverse Proxy & SSL Termination
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
      - server
      - client
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    networks:
      - vtt-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Monitoring & Observability
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - vtt-network
    security_opt:
      - no-new-privileges:true

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infra/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - vtt-network
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  vtt-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
