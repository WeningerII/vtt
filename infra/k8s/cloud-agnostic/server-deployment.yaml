apiVersion: apps/v1
kind: Deployment
metadata:
  name: vtt-server
  labels:
    app.kubernetes.io/name: vtt-server
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: vtt
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: vtt-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vtt-server
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: vtt
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      # Cloud-agnostic service account
      serviceAccountName: vtt-server
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: server
          image: "${VTT_SERVER_IMAGE}:${VTT_IMAGE_TAG}"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "8080"
            # Database configuration from secrets
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: vtt-secrets
                  key: DATABASE_URL
            # Cache configuration
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: vtt-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: vtt-config
                  key: REDIS_PORT
            # Object storage configuration
            - name: MINIO_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: vtt-config
                  key: MINIO_ENDPOINT
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: vtt-secrets
                  key: MINIO_ROOT_USER
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: vtt-secrets
                  key: MINIO_ROOT_PASSWORD
            # AI provider API keys
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: vtt-secrets
                  key: OPENAI_API_KEY
                  optional: true
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: vtt-secrets
                  key: ANTHROPIC_API_KEY
                  optional: true
            - name: GOOGLE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: vtt-secrets
                  key: GOOGLE_API_KEY
                  optional: true
            - name: OPENROUTER_API_KEY
              valueFrom:
                secretKeyRef:
                  name: vtt-secrets
                  key: OPENROUTER_API_KEY
                  optional: true
            - name: STABILITY_API_KEY
              valueFrom:
                secretKeyRef:
                  name: vtt-secrets
                  key: STABILITY_API_KEY
                  optional: true
            - name: REPLICATE_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: vtt-secrets
                  key: REPLICATE_API_TOKEN
                  optional: true
            - name: HUGGINGFACE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: vtt-secrets
                  key: HUGGINGFACE_API_KEY
                  optional: true
          envFrom:
            - configMapRef:
                name: vtt-config
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/.cache
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
      # Cloud-agnostic node selection
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: "kubernetes.io/arch"
          operator: "Equal"
          value: "amd64"
          effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - vtt-server
                topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: vtt-server-service
  namespace: vtt
  labels:
    app.kubernetes.io/name: vtt-server-service
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: vtt
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: vtt-server

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vtt-server
  namespace: vtt
  labels:
    app.kubernetes.io/name: vtt-server
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: vtt
  annotations:
    # Cloud-specific service account annotations would be added via Kustomize overlays
    # For example:
    # AWS: eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/vtt-server-role
    # GCP: iam.gke.io/gcp-service-account: vtt-server@PROJECT.iam.gserviceaccount.com
    # Azure: azure.workload.identity/service-account-token-expiration: "3600"
automountServiceAccountToken: true
