apiVersion: apps/v1
kind: Deployment
metadata:
  name: vtt-server-blue
  namespace: vtt-production
  labels:
    app.kubernetes.io/name: vtt-platform
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "1.0.0"
    version: blue
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: vtt-platform
      app.kubernetes.io/component: server
      version: blue
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vtt-platform
        app.kubernetes.io/component: server
        version: blue
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/api/v1/metrics/prometheus"
    spec:
      serviceAccountName: vtt-server
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: server
          # checkov:skip=CKV_K8S_43: Image digest is enforced by CI/CD at deploy time
          # checkov:skip=CKV_K8S_35: Using secrets as env vars is acceptable for production deployment
          image: ghcr.io/weningerii/vtt-server:IMAGE_TAG
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
          ports:
            - containerPort: 3001
              name: http
              protocol: TCP
          env:
            - name: PORT
              value: "3001"
          envFrom:
            - configMapRef:
                name: vtt-config
            - secretRef:
                name: vtt-secrets
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /livez
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /livez
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/.cache
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: vtt-platform
              app.kubernetes.io/component: server

---
apiVersion: v1
kind: Service
metadata:
  name: vtt-server
  namespace: vtt-production
  labels:
    app.kubernetes.io/name: vtt-platform
    app.kubernetes.io/component: server
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: vtt-platform
    app.kubernetes.io/component: server
    version: blue

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vtt-server
  namespace: vtt-production
  labels:
    app.kubernetes.io/name: vtt-platform
    app.kubernetes.io/component: server
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/VTTServerRole

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: vtt-server-hpa
  namespace: vtt-production
  labels:
    app.kubernetes.io/name: vtt-platform
    app.kubernetes.io/component: server
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: vtt-server-blue
  minReplicas: 3
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: vtt-server-pdb
  namespace: vtt-production
  labels:
    app.kubernetes.io/name: vtt-platform
    app.kubernetes.io/component: server
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vtt-platform
      app.kubernetes.io/component: server

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vtt-server-green
  namespace: vtt-production
  labels:
    app.kubernetes.io/name: vtt-platform
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "1.0.0"
    version: green
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: vtt-platform
      app.kubernetes.io/component: server
      version: green
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vtt-platform
        app.kubernetes.io/component: server
        version: green
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/api/v1/metrics/prometheus"
    spec:
      serviceAccountName: vtt-server
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: server
          # checkov:skip=CKV_K8S_43: Image digest is enforced by CI/CD at deploy time
          # checkov:skip=CKV_K8S_35: Using secrets as env vars is acceptable for production deployment
          image: ghcr.io/weningerii/vtt-server:IMAGE_TAG
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
          ports:
            - containerPort: 3001
              name: http
              protocol: TCP
          env:
            - name: PORT
              value: "3001"
          envFrom:
            - configMapRef:
                name: vtt-config
            - secretRef:
                name: vtt-secrets
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /livez
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /livez
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/.cache
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: vtt-platform
              app.kubernetes.io/component: server
              version: green
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: vtt-server-green-hpa
  namespace: vtt-production
  labels:
    app.kubernetes.io/name: vtt-platform
    app.kubernetes.io/component: server
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: vtt-server-green
  minReplicas: 3
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
