// Test Database Schema - Optimized for E2E Testing
generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/test-client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Mirror of production schema for E2E, targeting SQLite and test-client output

enum AssetKind {
  ORIGINAL
  DEPTH
  MASK
  TILE
  THUMBNAIL
  METADATA
}

enum JobType {
  TEXT_TO_IMAGE
  DEPTH
  SEGMENTATION
}

enum JobStatus {
  QUEUED
  RUNNING
  SUCCEEDED
  FAILED
  CANCELED
}

enum TokenType {
  PC
  NPC
  MONSTER
  OBJECT
  EFFECT
}

enum TokenVisibility {
  VISIBLE
  HIDDEN
  PARTIAL
  REVEALED
}

enum GameSessionStatus {
  WAITING
  ACTIVE
  PAUSED
  COMPLETED
  ABANDONED
}

enum EncounterStatus {
  PLANNED
  ACTIVE
  PAUSED
  COMPLETED
}

model Map {
  id         String   @id @default(uuid())
  name       String
  widthPx    Int
  heightPx   Int
  gridSizePx Int      @default(70)
  createdAt  DateTime @default(now())

  scenes     Scene[]
  assets     Asset[]
  jobs       GenerationJob[]

  @@index([name])
  @@index([createdAt])
  @@index([widthPx, heightPx])
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  username        String   @unique
  displayName     String
  passwordHash    String
  avatar          String?
  role            String   @default("player")
  permissions     Json     @default("[]")
  subscription    String   @default("free")
  isEmailVerified Boolean  @default(false)
  lastLogin       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  memberships     CampaignMember[]
  messages        ChatMessage[]
  refreshTokens   RefreshToken[]

  @@index([email])
  @@index([username])
  @@index([displayName])
  @@index([createdAt])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model Campaign {
  id            String   @id @default(uuid())
  name          String
  activeSceneId String?
  createdAt     DateTime @default(now())
  members       CampaignMember[]
  scenes        Scene[]
  settings      CampaignSettings?
  characters    CampaignCharacter[]

  @@index([name])
  @@index([createdAt])
  @@index([activeSceneId])
}

model CampaignMember {
  id         String   @id @default(uuid())
  role       String
  status     String   @default("active")
  userId     String
  campaignId String
  joinedAt   DateTime @default(now())
  invitedAt  DateTime?
  invitedBy  String?
  user       User     @relation(fields: [userId], references: [id])
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@unique([userId, campaignId])
  @@index([userId])
  @@index([campaignId])
  @@index([role, campaignId])
  @@index([status, campaignId])
}

model Scene {
  id         String   @id @default(uuid())
  name       String
  campaignId String
  mapId      String?
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  map        Map?     @relation(fields: [mapId], references: [id])

  @@index([campaignId])
  @@index([mapId])
  @@index([campaignId, createdAt])
}

model ChatMessage {
  id         String   @id @default(uuid())
  campaignId String
  authorId   String
  channel    String
  text       String
  timestamp  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id])

  @@index([campaignId, timestamp])
  @@index([authorId])
  @@index([channel, campaignId])
  @@index([timestamp])
}

model Character {
  id         String   @id @default(uuid())
  name       String
  sheet      Json
  prompt     String
  provider   String
  model      String
  cost       Float    @default(0)
  latencyMs  Int
  createdAt  DateTime @default(now())
  
  campaigns  CampaignCharacter[]

  @@index([name])
  @@index([provider, model])
  @@index([createdAt])
  @@index([cost])
}

model CampaignCharacter {
  id          String   @id @default(uuid())
  campaignId  String
  characterId String
  addedBy     String
  role        String   @default("player")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, characterId])
  @@index([campaignId])
  @@index([characterId])
  @@index([addedBy])
}

model Monster {
  id         String   @id @default(uuid())
  stableId   String   @unique
  name       String
  statblock  Json
  tags       Json     @default("[]")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([name])
  @@index([stableId])
  @@index([createdAt])
}

model Asset {
  id        String   @id @default(uuid())
  mapId     String?
  map       Map?     @relation(fields: [mapId], references: [id])
  kind      AssetKind
  uri       String
  mimeType  String?
  width     Int?
  height    Int?
  sizeBytes Int?
  checksum  String?
  createdAt DateTime @default(now())

  @@index([mapId])
}

model GenerationJob {
  id        String    @id @default(uuid())
  type      JobType
  status    JobStatus
  input     Json
  output    Json?
  error     String?
  mapId     String?
  map       Map?      @relation(fields: [mapId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  calls     ProviderCall[]

  @@index([mapId])
  @@index([status, type])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([status, updatedAt])
}

model ProviderCall {
  id        String        @id @default(uuid())
  jobId     String
  job       GenerationJob @relation(fields: [jobId], references: [id])
  provider  String
  model     String?
  costUSD   Float         @default(0)
  latencyMs Int?
  success   Boolean       @default(true)
  error     String?
  createdAt DateTime      @default(now())

  @@index([jobId])
  @@index([provider, model])
  @@index([success, provider])
  @@index([createdAt])
  @@index([costUSD])
}

model Token {
  id              String          @id @default(uuid())
  name            String
  type            TokenType
  visibility      TokenVisibility @default(VISIBLE)
  gameSessionId   String
  sceneId         String?
  characterId     String?
  x               Float           @default(0)
  y               Float           @default(0)
  z               Float           @default(0)
  rotation        Float           @default(0)
  scale           Float           @default(1)
  health          Int?
  maxHealth       Int?
  initiative      Int?
  speed           Int             @default(30)
  imageUrl        String?
  metadata        Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  gameSession     GameSession     @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  encounterTokens EncounterToken[]

  @@index([gameSessionId])
  @@index([sceneId])
  @@index([type])
  @@index([visibility])
  @@index([gameSessionId, sceneId])
  @@index([x, y])
}

model GameSession {
  id              String            @id @default(uuid())
  name            String
  campaignId      String
  status          GameSessionStatus @default(WAITING)
  currentSceneId  String?
  currentTurn     Int               @default(0)
  roundNumber     Int               @default(1)
  startedAt       DateTime?
  endedAt         DateTime?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  tokens          Token[]
  encounters      Encounter[]
  
  @@index([campaignId])
  @@index([status])
  @@index([createdAt])
  @@index([startedAt])
  @@index([campaignId, status])
}

model Encounter {
  id              String            @id @default(uuid())
  name            String
  gameSessionId   String
  sceneId         String?
  status          EncounterStatus   @default(PLANNED)
  initiativeOrder Json?
  currentTurn     Int               @default(0)
  roundNumber     Int               @default(1)
  startedAt       DateTime?
  endedAt         DateTime?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  gameSession     GameSession       @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  encounterTokens EncounterToken[]
  
  @@index([gameSessionId])
  @@index([status])
  @@index([sceneId])
  @@index([gameSessionId, status])
  @@index([startedAt])
}

model EncounterToken {
  id          String    @id @default(uuid())
  encounterId String
  tokenId     String
  initiative  Int?
  turnOrder   Int?
  isActive    Boolean   @default(true)
  joinedAt    DateTime  @default(now())
  leftAt      DateTime?
  
  encounter   Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  token       Token     @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  
  @@unique([encounterId, tokenId])
  @@index([encounterId])
  @@index([tokenId])
  @@index([initiative])
  @@index([isActive])
}

model CampaignSettings {
  id                String   @id @default(uuid())
  campaignId        String   @unique
  description       String   @default("")
  gameSystem        String   @default("dnd5e")
  isActive          Boolean  @default(true)
  isPublic          Boolean  @default(false)
  allowSpectators   Boolean  @default(true)
  maxPlayers        Int      @default(6)
  autoAcceptInvites Boolean  @default(false)
  requireApproval   Boolean  @default(true)
  sessionTimeout    Int      @default(240)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  campaign          Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@index([campaignId])
  @@index([isActive])
}

enum ConditionType {
  BUFF
  DEBUFF
  NEUTRAL
}

model Condition {
  id              String        @id @default(uuid())
  name            String
  type            ConditionType
  description     String        @default("")
  duration        Int?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  appliedConditions AppliedCondition[]
  
  @@index([name])
  @@index([type])
  @@index([createdAt])
}

model AppliedCondition {
  id            String    @id @default(uuid())
  conditionId   String
  targetId      String
  targetType    String
  duration      Int?
  metadata      Json?
  appliedBy     String?
  appliedAt     DateTime  @default(now())
  expiresAt     DateTime?
  isActive      Boolean   @default(true)
  
  condition     Condition @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  
  @@index([targetId, targetType])
  @@index([conditionId])
  @@index([isActive])
  @@index([expiresAt])
  @@index([appliedAt])
}
