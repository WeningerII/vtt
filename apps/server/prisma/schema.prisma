generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AssetKind {
  ORIGINAL
  DEPTH
  MASK
  TILE
  THUMBNAIL
  METADATA
}

enum JobType {
  TEXT_TO_IMAGE
  DEPTH
  SEGMENTATION
}

enum JobStatus {
  QUEUED
  RUNNING
  SUCCEEDED
  FAILED
  CANCELED
}

model Map {
  id         String   @id @default(uuid())
  name       String
  widthPx    Int
  heightPx   Int
  gridSizePx Int      @default(70)
  createdAt  DateTime @default(now())

  scenes     Scene[]
  assets     Asset[]
  jobs       GenerationJob[]
}

model User {
  id          String   @id @default(uuid())
  displayName String
  createdAt   DateTime @default(now())
  memberships CampaignMember[]
  messages    ChatMessage[]
}

model Campaign {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  members   CampaignMember[]
  scenes    Scene[]
}

model CampaignMember {
  id         String   @id @default(uuid())
  role       String
  userId     String
  campaignId String
  user       User     @relation(fields: [userId], references: [id])
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@unique([userId, campaignId])
}

model Scene {
  id         String   @id @default(uuid())
  name       String
  campaignId String
  mapId      String?
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  map        Map?     @relation(fields: [mapId], references: [id])
}

model ChatMessage {
  id         String   @id @default(uuid())
  campaignId String
  authorId   String
  channel    String
  text       String
  timestamp  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id])
}

/// Generated character sheets from Genisis
model Character {
  id         String   @id @default(uuid())
  name       String
  sheet      Json
  prompt     String
  provider   String
  model      String
  cost       Float    @default(0)
  latencyMs  Int
  createdAt  DateTime @default(now())
}

model Asset {
  id        String   @id @default(uuid())
  mapId     String?
  map       Map?     @relation(fields: [mapId], references: [id])
  kind      AssetKind
  uri       String
  mimeType  String?
  width     Int?
  height    Int?
  sizeBytes Int?
  checksum  String?
  createdAt DateTime @default(now())

  @@index([mapId])
}

model GenerationJob {
  id        String    @id @default(uuid())
  type      JobType
  status    JobStatus
  input     Json
  output    Json?
  error     String?
  mapId     String?
  map       Map?      @relation(fields: [mapId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  calls     ProviderCall[]

  @@index([mapId])
}

model ProviderCall {
  id        String        @id @default(uuid())
  jobId     String
  job       GenerationJob @relation(fields: [jobId], references: [id])
  provider  String
  model     String?
  costUSD   Float         @default(0)
  latencyMs Int?
  success   Boolean       @default(true)
  error     String?
  createdAt DateTime      @default(now())

  @@index([jobId])
}
