name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          deny-licenses: GPL-3.0, AGPL-3.0

  npm-audit:
    name: NPM Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Run pnpm audit
        run: pnpm audit --audit-level=moderate || true

      - name: Run pnpm audit (production only)
        run: pnpm audit --audit-level=high --prod

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  docker-security:
    name: Docker Image Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -f apps/server/Dockerfile -t vtt-server:test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vtt-server:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  env-var-check:
    name: Environment Variable Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for hardcoded development secrets..."
          if grep -r "dev-secret-change-in-production" apps/server/src/; then
            echo "::warning::Found hardcoded development secrets in production code"
          fi

      - name: Validate .env.example completeness
        run: |
          echo "Checking .env.example is up to date..."
          # Check that all required env vars are documented
          grep -h "process.env." apps/server/src/**/*.ts | grep -oP 'process\.env\.\K[A-Z_]+' | sort -u > required-vars.txt
          grep -oP '^[A-Z_]+=*' .env.example | cut -d= -f1 | sort -u > documented-vars.txt
          
          echo "Required environment variables:"
          cat required-vars.txt
          echo ""
          echo "Documented environment variables:"
          cat documented-vars.txt
          
          # Find missing vars (for informational purposes)
          comm -23 required-vars.txt documented-vars.txt > missing-vars.txt
          if [ -s missing-vars.txt ]; then
            echo "::warning::Some environment variables may not be documented:"
            cat missing-vars.txt
          fi
