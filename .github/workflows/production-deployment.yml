# checkov:skip=CKV_GHA_7: workflow_dispatch inputs are required for manual deployment control
name: Production Deployment Pipeline

permissions:
  contents: read

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: "Skip test suite"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(date +%Y%m%d)-${GITHUB_SHA:0:7}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Determine environment
        id: environment
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            ENV="production"
          else
            ENV="staging"
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV

  security-scan:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Run security audit
        run: |
          npm audit --audit-level=high

      - name: SAST with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  load-test:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: needs.pre-deployment-checks.outputs.environment == 'production' && !inputs.skip_tests
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: "20"
          pnpm-version: "9.12.2"

      - name: Install dependencies
        uses: ./.github/actions/install-deps
        with:
          frozen-lockfile: "true"

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run load tests
        run: |
          cd tests/load
          LOAD_TEST_USERS=50 LOAD_TEST_DURATION=180 npm run load-test

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: tests/load/results/

  build-and-push:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, security-scan]
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.combine_image_digests.outputs.digests }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (server)
        id: meta_server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/vtt-server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Extract metadata (client)
        id: meta_client
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/vtt-client
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push server image
        id: build_server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/server/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta_server.outputs.tags }}
          labels: ${{ steps.meta_server.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.pre-deployment-checks.outputs.version }}
            BUILD_DATE=${{ steps.meta_server.outputs.labels.created }}

      - name: Build and push client image
        id: build_client
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/client/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta_client.outputs.tags }}
          labels: ${{ steps.meta_client.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.pre-deployment-checks.outputs.version }}
            BUILD_DATE=${{ steps.meta_client.outputs.labels.created }}

      - name: Combine image digests
        id: combine_image_digests
        run: |
          echo "digests=server:${SERVER_DIGEST},client:${CLIENT_DIGEST}" >> "$GITHUB_OUTPUT"
        env:
          SERVER_DIGEST: ${{ steps.build_server.outputs.digest }}
          CLIENT_DIGEST: ${{ steps.build_client.outputs.digest }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-push]
    if: needs.pre-deployment-checks.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.vtt-platform.com
    steps:
      - uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          envsubst < infra/k8s/staging/deployment.yml | kubectl apply -f -
          kubectl rollout status deployment/vtt-app -n staging --timeout=300s
        env:
          IMAGE_TAG: ${{ needs.pre-deployment-checks.outputs.version }}

      - name: Run smoke tests
        run: |
          sleep 60
          curl -f https://staging.vtt-platform.com/health || exit 1

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          text: "Staging deployment completed"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-push, load-test]
    if: needs.pre-deployment-checks.outputs.environment == 'production' && always() && !contains(needs.*.result, 'failure')
    environment:
      name: production
      url: https://vtt-platform.com
    steps:
      - uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Create deployment backup
        run: |
          kubectl get deployment vtt-app -n production -o yaml > backup-deployment-$(date +%Y%m%d-%H%M%S).yml

      - name: Deploy to production with rolling update
        run: |
          envsubst < infra/k8s/production/deployment.yml | kubectl apply -f -
          kubectl rollout status deployment/vtt-app -n production --timeout=600s
        env:
          IMAGE_TAG: ${{ needs.pre-deployment-checks.outputs.version }}

      - name: Run production health checks
        run: |
          sleep 120
          for i in {1..5}; do
            curl -f https://vtt-platform.com/health && break
            sleep 30
          done

      - name: Run post-deployment tests
        run: |
          cd e2e
          npm run test:production

      - name: Update monitoring dashboards
        run: |
          # checkov:skip=CKV_GHA_3: Webhook URL is from secrets, not hardcoded
          curl -X POST "${{ secrets.GRAFANA_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"version": "${{ needs.pre-deployment-checks.outputs.version }}", "environment": "production"}'

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    environment:
      name: production
    steps:
      - name: Configure kubectl
        if: env.KUBE_CONFIG_PRODUCTION != ''
        env:
          KUBE_CONFIG_PRODUCTION: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/vtt-app -n production
          kubectl rollout status deployment/vtt-app -n production --timeout=300s

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: "warning"
          channel: "#incidents"
          text: "Production deployment rolled back due to health check failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (success() || contains(needs.*.result, 'success'))
    steps:
      - name: Update deployment tracking
        if: env.DEPLOYMENT_TRACKING_URL != ''
        env:
          DEPLOYMENT_TRACKING_URL: ${{ secrets.DEPLOYMENT_TRACKING_URL }}
        run: |
          # checkov:skip=CKV_GHA_3: Webhook URL is from secrets, not hardcoded
          curl -X POST "$DEPLOYMENT_TRACKING_URL" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ needs.pre-deployment-checks.outputs.version }}",
              "environment": "${{ needs.pre-deployment-checks.outputs.environment }}",
              "status": "${{ job.status }}",
              "timestamp": "${{ github.event.head_commit.timestamp }}",
              "commit": "${{ github.sha }}"
            }'

      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ needs.pre-deployment-checks.outputs.version }}
          body: |
            ## Changes in this Release
            - Automated deployment pipeline
            - Load testing validation
            - Security scanning passed
            - Production monitoring enabled

            ## Deployment Status
            - Environment: ${{ needs.pre-deployment-checks.outputs.environment }}
            - Image Digest: ${{ needs.build-and-push.outputs.image-digest }}
          draft: false
          prerelease: false
