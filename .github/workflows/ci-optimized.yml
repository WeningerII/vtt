name: CI (Optimized)

permissions:
  contents: read

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Turbo environment - only set if secrets exist to avoid linter warnings
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN || '' }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM || '' }}
  TURBO_REMOTE_ONLY: false

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.filter.outputs.packages }}
      apps: ${{ steps.filter.outputs.apps }}
      services: ${{ steps.filter.outputs.services }}
      e2e: ${{ steps.filter.outputs.e2e }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: shell
          filters: |
            packages:
              - 'packages/**'
            apps:
              - 'apps/**'
            services:
              - 'services/**'
            e2e:
              - 'e2e/**'
              - 'playwright.config.ts'

  lint-and-typecheck:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpng-dev libpng16-16 libpng-tools build-essential nasm yasm
          # Verify installation
          pkg-config --exists libpng || echo "Warning: libpng not found via pkg-config"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Lint (parallel with typecheck dependencies)
        run: |
          pnpm turbo lint --cache-dir=.turbo

      - name: Typecheck (with dependencies built)
        run: |
          # Typecheck has dependsOn: ["^build"] in turbo.json, so this will build dependencies first
          pnpm turbo typecheck --cache-dir=.turbo

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint-and-typecheck]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Restore turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ runner.os }}-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpng-dev libpng16-16 libpng-tools build-essential nasm yasm
          # Verify installation
          pkg-config --exists libpng || echo "Warning: libpng not found via pkg-config"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Generate Prisma client
        run: pnpm db:gen

      - name: Build with turbo
        run: pnpm turbo build --cache-dir=.turbo

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpng-dev libpng16-16 libpng-tools build-essential nasm yasm
          # Verify installation
          pkg-config --exists libpng || echo "Warning: libpng not found via pkg-config"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run tests with coverage (shard ${{ matrix.shard }}/4)
        run: |
          # Ensure directories exist before running tests
          mkdir -p .nyc_output coverage
          # Run tests with nyc coverage wrapper
          pnpm nyc pnpm turbo test --cache-dir=.turbo -- --shard=${{ matrix.shard }}/4
          # Verify .nyc_output was created and has content
          ls -la .nyc_output || echo "Warning: .nyc_output directory is empty or missing"
          # Copy nyc output to coverage directory for artifacts
          cp -r .nyc_output coverage/ || echo "No .nyc_output to copy"
          # Create placeholder if no coverage data was generated
          if [ ! -d "coverage/.nyc_output" ] || [ -z "$(ls -A coverage/.nyc_output 2>/dev/null)" ]; then
            echo "Creating placeholder coverage data"
            mkdir -p coverage/.nyc_output
            echo '{}' > coverage/.nyc_output/placeholder.json
          fi

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.shard }}
          path: |
            coverage/
            .nyc_output
          if-no-files-found: warn

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build, changes]
    if: needs.changes.outputs.e2e == 'true' || needs.changes.outputs.apps == 'true'
    strategy:
      matrix:
        shard: [1, 2]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpng-dev libpng16-16 libpng-tools build-essential nasm yasm
          # Verify installation
          pkg-config --exists libpng || echo "Warning: libpng not found via pkg-config"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Install Playwright browsers
        run: pnpm exec playwright install chromium --with-deps

      - name: Run E2E tests (shard ${{ matrix.shard }}/2)
        run: |
          pnpm test:e2e --shard=${{ matrix.shard }}/2

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.shard }}
          path: playwright-report/

  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results
        if: ${{ always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: Upload SARIF as artifact (forked PRs)
        if: ${{ always() && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-sarif
          path: trivy-results.sarif

  merge-coverage:
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true
          path: coverage/

      - name: Debug coverage artifacts
        run: |
          echo "Contents of coverage directory:"
          ls -la coverage/ || echo "No coverage directory found"
          find coverage -name ".nyc_output" -type d || echo "No .nyc_output found"
          find . -name "*.json" -path "./coverage/*" || echo "No coverage JSON files found"

      - name: Ensure .nyc_output exists
        run: mkdir -p .nyc_output

      - name: Prepare coverage data
        run: |
          # Ensure .nyc_output exists in root
          mkdir -p .nyc_output
          # Copy any .nyc_output data from downloaded artifacts
          find coverage -name ".nyc_output" -type d -exec cp -r {}/* .nyc_output/ \; 2>/dev/null || true
          # If no .nyc_output data, create empty structure
          if [ ! -d ".nyc_output" ] || [ -z "$(ls -A .nyc_output 2>/dev/null)" ]; then
            echo "No .nyc_output data found, creating placeholder"
            mkdir -p .nyc_output
            echo '{}' > .nyc_output/out.json
          fi

      - name: Generate coverage report
        run: |
          npx nyc report --reporter=text --reporter=lcov
          # Ensure lcov.info is in the expected location for PR comments
          if [ -f "lcov.info" ] && [ ! -f "coverage/lcov.info" ]; then
            mkdir -p coverage
            cp lcov.info coverage/lcov.info
          fi
          # Verify coverage files were generated
          ls -la coverage/ || echo "No coverage directory after report generation"
          ls -la lcov.info coverage/lcov.info 2>/dev/null || echo "No lcov files found"

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
